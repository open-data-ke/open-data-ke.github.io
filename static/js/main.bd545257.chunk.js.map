{"version":3,"sources":["components/utils.js","components/App.js","serviceWorker.js","index.js"],"names":["renameJsonArrayItemKeys","jsonArray","translations","map","item","obj","keysMap","Object","keys","reduce","acc","key","objectSpread","defineProperty","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","fetch","process","then","response","json","data","possibleActions","id","description","setState","availableCountries","name","addPhone","e","visibleSections","action-select","phone","email","country-select","location-select","mines-select","buttons","addEmail","handleSelect","selectedCountry","_id","getLocations","onChange","location-selecte","selectedAction","state","availableMines","availableLocations","selectedLocation","selectedMine","bind","assertThisInitialized","handleLocationSelect","handleMineSelect","handleSubmit","_this2","_this3","getMines","_this4","_this5","setButtonVisibility","actualState","method","headers","Content-Type","body","JSON","stringify","alert","_this6","_this$state","react_default","a","createElement","className","react_select_esm","options","isSearchable","autoFocus","placeholder","type","onKeyPress","target","value","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd545257.chunk.js","sourcesContent":["\nconst renameJsonArrayItemKeys = (jsonArray, translations) => {\n    const renameKeys = (obj, keysMap) => Object\n        .keys(obj)\n        .reduce((acc, key) => ({\n            ...acc,\n            ...{ [keysMap[key] || key]: obj[key] }\n        }), {});\n\n    return jsonArray.map(item => renameKeys(item, translations));\n}\n\nconst matchPhoneOrEmail = (value) => {\n    const pattern = {\n        type: undefined, // phone, or email\n        confidence: undefined, // confidence of match\n        message: undefined // message if confidence < some threshold\n    }\n\n    /* Strategy 1:\n    match phone, if confidence > threshold, return, else set pattern type, confidence and hint as message.\n    match email, update pattern if confidence > threshold or if confidence > phone confidence.\n    return */\n\n    /* Strategy 2:\n    fuzzy match patern as the user continues typing....?\n    */\n\n    return pattern;\n}\n\nexport {\n    renameJsonArrayItemKeys,\n    matchPhoneOrEmail\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\n// componets\nimport Select from \"react-select\";\n\n// utils\nimport {\n    renameJsonArrayItemKeys,\n} from \"./utils\";\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            possibleActions: [],\n            availableCountries: [],\n            availableMines: [],\n            availableLocations: [],\n            selectedAction: '',\n            selectedCountry: '',\n            selectedLocation: '',\n            selectedMine: '',\n            phone: '',\n            email: '',\n            visibleSections: { // keep these in sequential order of visibility\n                \"action-select\": true,\n                \"phone\": false,\n                \"email\": false,\n                \"country-select\": false,\n                \"location-select\": false,\n                \"mines-select\": false,\n                \"buttons\": false,\n            }\n        }\n        this.onChange = this.onChange.bind(this);\n        this.addPhone = this.addPhone.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n        this.addEmail = this.addEmail.bind(this);\n        this.handleLocationSelect = this.handleLocationSelect.bind(this);\n        this.handleMineSelect = this.handleMineSelect.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount = () => {\n        // fetch possible actions from database\n        fetch(process.env.REACT_APP_API_URL+'/api/v1/actions')\n            .then(response => response.json())\n            .then(data => {\n                const actionMapping = {\n                    id: \"value\",\n                    description: \"label\"\n                }\n                let possibleActions = renameJsonArrayItemKeys(data, actionMapping);\n                this.setState({ possibleActions });\n            });\n\n        // fetch countries from database\n        fetch(process.env.REACT_APP_API_URL+'/api/v1/countries')\n            .then(response => response.json())\n            .then(data => {\n                const countryMapping = {\n                    id: \"value\",\n                    name: \"label\"\n                }\n                let availableCountries = renameJsonArrayItemKeys(data, countryMapping);\n                this.setState({ availableCountries });\n        });\n    }\n\n    addPhone = (e) => {\n        if(e.key === 'Enter') {\n            this.setState({\n                visibleSections: { // keep these in sequential order of visibility\n                    \"action-select\": true,\n                    \"phone\": true,\n                    \"email\": true,\n                    \"country-select\": false,\n                    \"location-select\": false,\n                    \"mines-select\": false,\n                    \"buttons\": false\n                }\n            });\n        }\n    }\n\n    addEmail = (e) => {\n        if(e.key === 'Enter') {\n            this.setState({\n                visibleSections: { // keep these in sequential order of visibility\n                    \"action-select\": true,\n                    \"phone\": true,\n                    \"email\": true,\n                    \"country-select\": true,\n                    \"location-select\": false,\n                    \"mines-select\": false,\n                    \"buttons\": false\n                }\n            });\n        }\n    }\n\n    handleSelect = (e) => {\n        // console.log(e);\n        this.setState({\n            visibleSections: { // keep these in sequential order of visibility\n                \"action-select\": true,\n                \"phone\": true,\n                \"email\": true,\n                \"country-select\": true,\n                \"location-select\": false,\n                \"mines-select\": false,\n                \"buttons\": false\n            },\n            selectedCountry: e._id\n        }, () => {\n            this.getLocations();\n        });\n    }\n\n    getLocations(){\n        fetch(process.env.REACT_APP_API_URL+'/api/v1/countries/'+this.state.selectedCountry+'/locations')\n            .then(response => response.json())\n            .then(data => {\n                const locationMapping = {\n                    id: \"value\",\n                    name: \"label\"\n                }\n                let availableLocations = renameJsonArrayItemKeys(data, locationMapping);\n                this.setState({ \n                    visibleSections: { // keep these in sequential order of visibility\n                        \"action-select\": true,\n                        \"phone\": true,\n                        \"email\": true,\n                        \"country-select\": true,\n                        \"location-select\": true,\n                        \"mines-select\": false,\n                        \"buttons\": false\n                    },\n                    availableLocations\n                });\n            });\n    }\n\n    handleLocationSelect(e){\n        this.setState({\n            selectedLocation: e._id\n        }, () => {\n            this.getMines();\n        })\n    }\n\n    getMines(){\n        fetch(process.env.REACT_APP_API_URL+'/api/v1/locations/'+this.state.selectedLocation+'/mines')\n            .then(response => response.json())\n            .then(data => {\n                const minesMapping = {\n                    id: \"value\",\n                    name: \"label\"\n                }\n                let availableMines = renameJsonArrayItemKeys(data, minesMapping);\n                this.setState({ \n                    visibleSections: { // keep these in sequential order of visibility\n                        \"action-select\": true,\n                        \"phone\": true,\n                        \"email\": true,\n                        \"country-select\": true,\n                        \"location-select\": true,\n                        \"mines-select\": true,\n                        \"buttons\": false\n                    },\n                    availableMines\n                });\n            });\n    }\n\n    handleMineSelect(e){\n        this.setState({ \n            selectedMine: e._id,\n        }, () => {\n            this.setButtonVisibility();\n        });\n    }\n\n    setButtonVisibility(){\n        this.setState({\n            visibleSections: { // keep these in sequential order of visibility\n                \"action-select\": true,\n                \"phone\": true,\n                \"email\": true,\n                \"country-select\": true,\n                \"location-select\": true,\n                \"mines-select\": true,\n                \"buttons\": true\n            },\n        });\n    }\n\n    onChange = (e) => {\n        this.setState({\n            visibleSections: {\n                \"action-select\": true,\n                \"phone\": true,\n                \"email\": false,\n                \"country-select\": false,\n                \"location-selecte\": false,\n                \"buttons\": false\n            },\n            selectedAction: e._id,\n        });\n    }\n\n    handleSubmit(){\n        let actualState = this.state;\n        delete actualState.possibleActions;\n        delete actualState.availableCountries;\n        delete actualState.availableMines;\n        delete actualState.availableLocations;\n        delete actualState.visibleSections;\n        fetch(process.env.REACT_APP_API_URL+'/api/v1/subscriptions', {\n            method: 'post',\n            headers: { \n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(actualState)\n        }).then(() => alert('successfully posted data'));\n\n    }\n\n    render() {\n        const {possibleActions, visibleSections} = this.state;\n        return (\n            <div className=\"main\">\n                <div className=\"banner\">\n                    <h1>MYNR</h1>\n                    <p>local resource</p>\n                    <hr/>\n                </div>\n\n                <div className=\"torso\">\n                    {\n                        visibleSections[\"action-select\" ]?\n                        <div className=\"stage action-select\">\n                            <h4>I want to ...</h4>\n                            <Select options={possibleActions}\n                                isSearchable=\"true\"\n                                autoFocus=\"true\"\n                                placeholder=\"type/select action\"\n                                onChange={this.onChange}\n                            />\n                        </div> :\n                        <span className=\"hidden\"></span>\n                    }\n                    {\n                        visibleSections[\"phone\"] ?\n                        <div className=\"stage phone-email\">\n                            <h4>Enter Phone</h4>\n                            <input type=\"text\" name=\"phone\" onKeyPress={this.addPhone} onChange={e=>this.setState({phone: e.target.value})} placeholder=\"enter phone\"/>\n                        </div> :\n                        <span className=\"hidden\"></span>\n                    }\n                    {\n                        visibleSections[\"email\"] ?\n                        <div className=\"stage phone-email\">\n                            <h4>Enter Email</h4>\n                            <input type=\"email\" name=\"email\" onKeyPress={this.addEmail} onChange={e=>this.setState({email: e.target.value})} placeholder=\"enter email\"/>\n                        </div> :\n                        <span className=\"hidden\"></span>\n                    }\n                    {\n                        visibleSections[\"country-select\"] ?\n                        <div className=\"stage country-select\">\n                            <h4>Select Country</h4>\n                            <Select options={this.state.availableCountries}\n                                isSearchable=\"true\"\n                                placeholder=\"\"\n                                onChange={this.handleSelect}\n                            />\n                        </div> :\n                        <span className=\"hidden\"></span>\n                    }\n                    {\n                        visibleSections[\"location-select\"] ?\n                        <div className=\"stage location-select\">\n                            <h4>Select Location</h4>\n                            <Select options={this.state.availableLocations}\n                                isSearchable=\"true\"\n                                placeholder=\"\"\n                                onChange={this.handleLocationSelect}\n                            />\n                        </div> :\n                        <span className=\"hidden\"></span>\n                    }\n                    {\n                        visibleSections[\"mines-select\"] ?\n                        <div className=\"stage mines-select\">\n                            <h4>Select Mine</h4>\n                            <Select options={this.state.availableMines}\n                                isSearchable=\"true\"\n                                placeholder=\"\"\n                                onChange={this.handleMineSelect}\n                            />\n                        </div> :\n                        <span className=\"hidden\"></span>\n                    }\n                    {\n                        visibleSections[\"buttons\"] ?\n                        <div className=\"stage country-select\">\n                            <button type=\"button\" onClick={this.handleSubmit}>Process Form Information</button>\n                        </div> :\n                        <span className=\"hidden\"></span>\n                    }                    \n                </div>\n                <div className=\"footer\"></div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}